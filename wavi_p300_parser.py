#!/usr/bin/env python
# coding: utf-8

from argparse import ArgumentParser
import os
import glob
import sys
import pandas as pd


args = ArgumentParser('./wavi_p300_parser.py', description="""This program has been
designed to parse the output files generated by a WAVI EEG system. Starting from the
directory designated by the -i option, wavi_p300_parser will search for subdirectories
containing files ending in '.eeg', '.art', and '.mag' and combine the information into a
single csv file containing information from all of the separate files. This program was
written to simplify the process of analyzing EEG data for labs at Noorda College of
Medicine and may require some optimization for your lab.
Example usage: ./wavi_p300_parser.py -i ..
"""
)
# Removed output option for now. May bring it back later

args.add_argument(
	'-i',
	'--input_directory',
	help="""
	This is the directory where wavi_p300_parser.py will begin looking for subdirectories
	containing files ending in '.eeg', '.art', and '.mag'. By default, wavi_p300_parser.py
	will begin with your current working directory.
	""",
	default="."
)

# args.add_argument(
# 	'-o',
# 	'--output_directory',
# 	help="""
# 	This is the directory where wavi_p300_parser.py will save the output files. By
# 	default, wavi_p300_parser will store the files in a new directory 'Wavi_P300_Output'.
# 	""",
# 	default="Wavi_P300_Output"
# )

args = args.parse_args()
input_directory = args.input_directory
# output_directory = args.output_directory

def error_message():
	print()
	print("""
	Welcome to wavi_p300_parser.py. This program has been designed to parse the output
	files generated by a WAVI. Starting from the directory designated from the -i option,
	wavi_p300_parser will search for subdirectories containing files ending in '.eeg', '.art',
	and '.mag' and combine the information into a single csv file containing information
	from all of the separate files. This program was written to simplify the process of
	analyzing EEG data for labs at Noorda College of Medicine and may require some
	optimization for your lab.
	""")
	print()
	print("\tExample usage: ./wavi_p300_parser.py -i .. -o ../combined_files")
	print()

all_folders = glob.glob(input_directory+'/**/**')
usable_folders = []
for subfolder in all_folders:
	if subfolder.endswith('eeg'):
		usable_folders.append('/'.join(subfolder.split('/')[:-1]))
	if len(glob.glob(subfolder+'/*.eeg')) > 0:
		usable_folders.append(subfolder)


if len(usable_folders) == 0:
	error_message()
	print("\tNo subdirectories from your specified input directory contain '.eeg' files.")
	print("\tPlease try running wavi_p300_parser.py using the -i option to specify a starting folder.")
	print()
	sys.exit(1)

def get_time(df):
	time_msec = 4*df.name
	time_sec = time_msec/1000
	time_min = time_sec/60
	df['time_msec'] = time_msec
	df['time_sec'] = time_sec
	df['time_min'] = time_min
	return df

def combine_eeg_files(folder):
	# files = os.listdir(folder)
	eeg_files = glob.glob(folder+'/*eeg')
	if len(eeg_files) > 1:
		print("\tSubfolder "+folder+' contains more than one ".eeg" file.')
		print("\tThis folder will be skipped.")
		#continue
	eeg_file = eeg_files[0]
	art_file = None
	art_files = glob.glob(folder+'/*art')
	if len(art_files) == 1:
		art_file = art_files[0]
	mag_file = None
	mag_files = glob.glob(folder+'/*mag')
	if len(mag_files) == 1:
		mag_file = mag_files[0]
	evt_file = None
	evt_files = glob.glob(folder+'/*evt')
	if len(evt_files) == 1:
		evt_file = evt_files[0]

	try:
		output_file_name = folder+'/'+folder.split('/')[-2]+'_'+folder.split('/')[-1]+'_WAVI_eeg.csv'
	except IndexError:
		output_file_name = folder+'/'+folder.split('/')[-1]+'_WAVI_eeg.csv'

	eeg_df = pd.read_csv(eeg_file, header = None, delim_whitespace=True)
	if mag_file:
		mag_df = pd.read_csv(mag_file, delim_whitespace=True)
		probe_labels = mag_df["LOC"].values
		eeg_df = eeg_df[eeg_df.columns[0:len(probe_labels)]]
		eeg_df.columns = probe_labels
	# Now to get the time stamp for each entry.
	eeg_df = eeg_df.apply(get_time, axis = 1)

	if art_file:
		art_df = pd.read_csv(art_file, header = None, sep=' ')
		if mag_file:
			art_df = art_df[art_df.columns[0:len(probe_labels)]]
			art_labels = []
			for name in probe_labels:
				art_labels.append(name+'_Artifact')
			art_df.columns = art_labels
	if evt_file:
		evt_df = pd.read_csv(evt_file, header = None)
		evt_df.columns=['Event']

	dataframes_to_combine = []
	if evt_file:
		dataframes_to_combine.append(evt_df)
	dataframes_to_combine.append(eeg_df)
	if art_file:
		dataframes_to_combine.append(art_df)
	combined_data = pd.concat(dataframes_to_combine, axis = 1)
	combined_data.to_csv(output_file_name)

for subfolder in usable_folders:
	combine_eeg_files(subfolder)
